mScan

Created by:
 Eleanor O'Rourke (eorourke@cs.washington.edu)
 Nicola Dell (nixdell@cs.washington.edu)
 Vincent Lung (vincent.lung@gmail.com)
 Nathan Breit (nbnate@uw.edu)
 
 Based on the CVCamera example in OpenCV.
 
*** Source tree information ***
Quick description of the content in the root folder:

AndroidManifest.xml - Manifest of the Android application
android-opencv.mk   - Build settings for C++ components (possibly unnecessairy)
LastKnownGoodBuild  - Contains the apk file for the last known good build
Makefile			- Makefile for C++ components
README              - This file
build.xml           - Build manifest for the Android application
default.properties  - Default build properties for the Android application
jni                 - Source tree for C++ components
local.*             - Build configuration file
opencv              - The minimum set of the OpenCV library needed to build BubbleBot
proguard.cfg        - Proguard configuration file
res                 - Source tree for Java resources
src                 - Source tree for Java components

*** Main BubbleBot source file information ***
All Android java activites are under the src/com/bubblebot/ folder:
BubbleBot.java				- BubbleBot Main menu
BubbleCollect.java			- Activity launched from main menu for capturing a form image using live camera feed
AfterPhotoTaken.java		- Activity called after BubbleCollect to evaulate the captured image
BubbleProcess.java			- Activity called after AfterPhotoTaken to process the captured image
DisplayProcessedForm.java	- Activity called after BubbleProcess to display the processed image
DisplayProcessedData.java	- Activity optionally called by DisplayProcessedForm to display data extracted from processed image
ViewBubbleForms.java		- Activity launched from main menu to view previously processed forms
BubbleInstructions.java		- Activity launched from main menu to display user instructions
jni/						- Everything under this folder are generated by SWIG to Java-to-C++ invocation
	
All files under the opencv/ folder came from the OpenCV library.
The following files in the opencv/android/android-jni/src/com/opencv/camera/ folder are
heavily modified for the BubbleBot application:
NativePreviewer.java	- A library that sets up the camera for previewing and handles other camera operations.
NativeProcessor.java	- A library that processes the live camera feed from NativePreviewer.

All BubbleBot C++ code are under the jni/ felder:
Android.mk		- Makefile
Application.mk  - Makefile
*.i				- Interface files created for SWIG to generate java files for Java-to-C++ invocation
*.h				- Header files
Feedback.cpp	- C++ library for visual feedback component 
Processor.cpp	- C++ library for form processing, form detection and form digitalization
gen/			- Files generated by SWIG for Java-to-C++ invocation

*** Building the project ***
The TestSuite requires you to have OpenCV on your machine but the OpenCV code for building on android is included in the OpenCV-2.3.1 folder.
In order to see how this is set up take a look at:
http://opencv.itseez.com/trunk/doc/tutorials/introduction/android_binary_package/android_binary_package_using_with_NDK.html

The only external dependencies are the android sdk and ndk
We assume that you have the NDK in ~/android-ndk-r6
You can change this directory in local.env.mk
We assume that you have the SDK in ~/android-sdk-linux_x86
This path can be changed in local.properties

To clean the project:
1) Enter "make clean"
2) Enter "ant clean"

To build the project:
1) Enter "make" to build the C++ components
2) Enter "ant debug" to bulid the Java compononts and the Android application
Alternatively, enter "ant install" in step 2 to install the Android application to the connected
emulator or phone after the application is built.
